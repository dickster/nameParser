package parser;

import com.google.common.base.Preconditions;
import parser.jj.NameParserConstants;

// TODO : extend this class so there is salutationToken, titleToken, relationToken
public class NameToken  {

    int kind;
    String value;    // e.g. "Mr."    the value the user originally input.
    String tokenText;     // e.g. <MR>     the token image string.   generated by javacc.
    String normalizedText; // e.g. Mister      a user/db friendly standardized tring for value.
    NameTokenType type;
    Character initial;


    NameToken(String value, int kind, NameTokenType type) {
        Preconditions.checkArgument(value != null);
        this.value = value;
        this.kind = kind;
        this.tokenText = NameParserConstants.tokenImage[kind];
        this.normalizedText = value;  // by default.
        this.type = type;
        this.initial = maybeGetInitial(value);
    }

    private Character maybeGetInitial(String value) {
        return ((value.length()==2 && value.endsWith(".")) ||
                value.length()==1) ?
            value.charAt(0) :
                null;

    }

    @Override
    public String toString() {
        return normalizedText;
    }

    public NameMatch compareTo(NameToken other) {
        if (kind!=other.kind) {
            return NameMatch.NONE;
        }
        if (isInitial() || other.isInitial()) {
            if (normalizedText.substring(0,1).equalsIgnoreCase(other.normalizedText.substring(0,1)) ) {
                return NameMatch.POSSIBLE;
            }
        }
        return normalizedText.equalsIgnoreCase(other.normalizedText) ?
                NameMatch.DEFINITE :
                NameMatch.NONE;
    }

    public boolean isInitial() {
    return initial!=null;
    }

}